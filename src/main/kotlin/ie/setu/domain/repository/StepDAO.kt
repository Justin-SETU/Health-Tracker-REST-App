package ie.setu.domain.repository

import ie.setu.domain.Step
import ie.setu.domain.db.Steps
import ie.setu.utils.mapToStep
import io.github.oshai.kotlinlogging.KotlinLogging
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.transactions.transaction

class StepDAO {

    //Get all the steps in the database regardless of user id
    fun getAll(): ArrayList<Step> {
        val stepsList: ArrayList<Step> = arrayListOf()
        transaction {
            Steps.selectAll().map {
                stepsList.add(mapToStep(it)) }
        }
        return stepsList
    }

    //Find a specific step by step id
    fun findByStepId(id: Int): Step?{
        return transaction {
            Steps
                .selectAll().where { Steps.id eq id}
                .map{mapToStep(it)}
                .firstOrNull()
        }
    }

    //Find all steps for a specific user id
    fun findByUserId(userId: Int): List<Step>{
        return transaction {
            Steps
                .selectAll().where {Steps.userId eq userId}
                .map { mapToStep(it) }
        }
    }

    //Save an step to the database
    fun save(step: Step): Int {
        return transaction {
            val stepId = Steps.insert {
                it[distance] = step.distance
                it[steps] = step.steps
                it[userId] = step.userId
            } get Steps.id
            //returns the step id as generated by the table
            stepId
        }
    }

    fun updateByStepId(stepId: Int, stepToUpdate: Step) : Int{
        return transaction {
            Steps.update ({
                Steps.id eq stepId}) {
                it[distance] = stepToUpdate.distance
                it[steps] = stepToUpdate.steps
                it[userId] = stepToUpdate.userId
            }
        }
    }

    fun deleteByStepId (stepId: Int): Int{
        return transaction{
            Steps.deleteWhere { Steps.id eq stepId }
        }
    }

    fun deleteByUserId (userId: Int): Int{
        return transaction{
            Steps.deleteWhere { Steps.userId eq userId }
        }
    }

}